#!/bin/bash

#
#                         License
#
# Copyright (C) 2021  Keith Valin kvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# This script automates the execution of gpu_burn.
#

CUDA_PATH="/usr/local/cuda"
gpu_burn_repo="https://github.com/wilicc/gpu-burn.git"
GPU_BURN_DIRNAME="gpu_burn"
duration=10
edge=0

build_gpu_burn() {
	git clone $gpu_burn_repo $GPU_BURN_DIRNAME
	pushd $GPU_BURN_DIRNAME > /dev/null

	make
	popd > /dev/null
}

run_gpu_burn() {
	pushd $GPU_BURN_DIRNAME > /dev/null
	./gpu_burn $duration > /tmp/gpu_burn.out
	popd > /dev/null
}

generate_result() {
	final_results=`tr '\r' '\n' < /tmp/gpu_burn.out | grep "100.0%" | tail -n 1`
	
	if [[ $edge -eq 0 ]]; then
		gpus=`grep -Eo "^GPU [0-9]+" /tmp/gpu_burn.out | awk '{ print $2 }'`
	else
		gpus=(0)
	fi

	header=""
	result_line=""
	for gpu_num in $gpus; do
		gpu_name=`grep -E "^GPU 0:" /tmp/gpu_burn.out | awk '{ print $3 " " $4 }'`
		header="$gpu_name (Gflop/s),$header"
		gpu_result=`echo $final_results | cut -d'-' -f$((gpu_num+1)) | grep -E "[0-9]+ Gflop/s" | awk '{ print $1 }'`
		result_line="$gpu_result,$result_line"
	done

	echo $header
	echo $result_line
}

ARGS=(
	"duration"
)

NO_ARGS=(
	"jetson"
)

opts=$(getopt \
	--longoptions "$(printf "%s:," "${ARGS[@]}")" \
	--longoptions "$(printf "%s," "${NO_ARGS[@]}")" \
	--name "$(basename "$0")" \
	--options "hd:" \
	-- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
	case "$1" in
		--duration | -d)
			duration=$2
			shift 2
		;;
		--jetson)
			gpu_burn_repo="https://github.com/kdvalin/jetson-gpu-burn.git"
			edge=1

			if [[ ! -e $CUDA_PATH ]]; then
				ln -s /usr/cuda $CUDA_PATH
			fi
			shift 1
		;;
		-h)
			usage $0
		;;
		--)
			break
		;;
		*)
			echo option not found $1
			usage $0
		;;
	esac
done

build_gpu_burn
run_gpu_burn
generate_result
